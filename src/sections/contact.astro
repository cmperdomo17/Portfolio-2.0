---
import SocialLinks from "@/components/socialLinks/socialLinks.astro";
import { useTranslations } from "@/i18n/utils";

const currentLang = Astro.currentLocale || "en";
const translateLabels = useTranslations(currentLang as "en" | "es");
---

<section id="contact" class="py-20 relative overflow-hidden">
  <div id="contact-particles" class="absolute inset-0"></div>

  <!-- Background Elements -->
  <div
    class="absolute top-40 left-10 w-64 h-64 bg-secondary/50 rounded-full blur-3xl"
  >
  </div>
  <div
    class="absolute bottom-10 right-10 w-80 h-80 bg-secondary/60 rounded-full blur-3xl"
  >
  </div>

  <div class="container mx-auto px-4 md:px-8 relative">
    <!-- Section Header -->
    <div class="text-center mb-12">
      <h2
        class="text-5xl font-extrabold bg-gradient-to-r from-primary to-white text-transparent bg-clip-text mb-4"
      >
        {translateLabels("contact.title")}
      </h2>
      <p class="text-text/80 max-w-2xl mx-auto">
        {translateLabels("contact.description")}
      </p>
    </div>

    <div class="grid md:grid-cols-5 gap-8 max-w-5xl mx-auto">
      <!-- Contact Info Sidebar -->
      <div
        class="md:col-span-2 bg-background/20 backdrop-blur-sm p-6 rounded-2xl border border-primary"
      >
        <h3 class="text-xl font-semibold mb-6 flex items-center gap-2">
          <i class="ri-contacts-book-line text-primary"></i>
          {translateLabels("contact.infoTitle")}
        </h3>

        <div class="space-y-6">
          <div class="flex items-start gap-4">
            <div class="bg-primary/20 px-2 py-1 rounded-full">
              <i class="ri-mail-line text-xl text-primary"></i>
            </div>
            <div>
              <h4 class="text-lg text-primary font-bold">
                {translateLabels("contact.emailTitle")}
              </h4>
              <a
                href="mailto:cmperdomo7@gmail.com"
                class="text-text hover:text-primary transition-colors duration-500"
              >
                cmperdomo7@gmail.com
              </a>
            </div>
          </div>

          <div class="flex items-start gap-4">
            <div class="bg-primary/20 px-2 py-1 rounded-full">
              <i class="ri-map-pin-line text-xl text-primary"></i>
            </div>
            <div>
              <h4 class="text-lg text-primary font-bold">
                {translateLabels("contact.locationTitle")}
              </h4>
              <p class="text-text">{translateLabels("contact.location")}</p>
            </div>
          </div>

          <div class="flex items-start gap-4">
            <div class="bg-primary/20 px-2 py-1 rounded-full">
              <i class="ri-time-line text-xl text-primary"></i>
            </div>
            <div>
              <h4 class="text-lg text-primary font-bold">
                {translateLabels("contact.availabilityTitle")}
              </h4>
              <p class="text-text">{translateLabels("contact.availability")}</p>
            </div>
          </div>
        </div>

        <!-- Social Media Links -->
        <div class="mt-8">
          <h4 class="text-lg font-medium mb-2">
            {translateLabels("contact.socialTitle")}
          </h4>
          <SocialLinks />
        </div>
      </div>

      <!-- Contact Form -->
      <div
        class="md:col-span-3 bg-background/20 backdrop-blur-sm p-6 rounded-2xl border border-primary"
      >
        <h3 class="text-xl font-semibold mb-6 flex items-center gap-2">
          <i class="ri-send-plane-line text-primary"></i>
          {translateLabels("contact.formTitle")}
        </h3>

        <form id="contact-form" class="space-y-6">
          <div class="grid md:grid-cols-2 gap-4">
            <div class="form-group">
              <label for="name" class="block text-primary mb-2">
                {translateLabels("contact.formName")}
              </label>
              <div class="relative">
                <i
                  class="ri-user-line absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"
                ></i>
                <input
                  type="text"
                  id="name"
                  class="w-full bg-background/20 border border-primary rounded-full py-2 px-10 text-text focus:outline-none focus:border-white transition-colors autofill:bg-transparent"
                  placeholder={Array.isArray(translateLabels("contact.formNamePlaceholder")) ? translateLabels("contact.formNamePlaceholder")[0] : translateLabels("contact.formNamePlaceholder") as string}
                />
              </div>
            </div>

            <div class="form-group">
              <label for="email" class="block text-primary mb-2">
                {translateLabels("contact.formEmail")}
              </label>
              <div class="relative">
                <i
                  class="ri-mail-line absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"
                ></i>
                <input
                  type="email"
                  id="email"
                  class="w-full bg-background/20 border border-primary rounded-full py-2 px-10 text-text focus:outline-none focus:border-white transition-colors"
                  placeholder={Array.isArray(translateLabels("contact.formEmailPlaceholder")) ? translateLabels("contact.formEmailPlaceholder")[0] : translateLabels("contact.formEmailPlaceholder") as string}
                />
              </div>
            </div>
          </div>

          <div class="form-group">
            <label for="subject" class="block text-primary mb-2">
              {translateLabels("contact.formSubject")}
            </label>
            <div class="relative">
              <i
                class="ri-bookmark-line absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"
              ></i>
              <input
                type="text"
                id="subject"
                class="w-full bg-background/20 border border-primary rounded-full py-3 px-10 text-text focus:outline-none focus:border-white transition-colors autofill:bg-transparent"
                placeholder={Array.isArray(translateLabels("contact.formSubjectPlaceholder")) ? translateLabels("contact.formSubjectPlaceholder")[0] : translateLabels("contact.formSubjectPlaceholder") as string}
              />
            </div>
          </div>

          <div class="form-group">
            <label for="message" class="block text-primary mb-2">
              {translateLabels("contact.formMessage")}
            </label>
            <div class="relative">
              <i class="ri-chat-1-line absolute left-3 top-3 text-gray-400"></i>
              <textarea
                id="message"
                rows="5"
                class="w-full bg-background/20 border border-primary rounded-2xl py-3 px-10 text-text transition-colors"
                placeholder={Array.isArray(translateLabels("contact.formMessagePlaceholder")) ? translateLabels("contact.formMessagePlaceholder")[0] : translateLabels("contact.formMessagePlaceholder") as string}
              ></textarea>
            </div>
          </div>

          <div class="flex items-center gap-2 text-text">
            <input
              type="checkbox"
              id="consent"
              class="accent-primary w-4 h-4 rounded-full"
            />
            <label for="consent">
              {translateLabels("contact.formConsent")}
            </label>
          </div>

          <button
            type="submit"
            class="w-full bg-background/20 hover:bg-primary border border-primary text-primary hover:text-background py-3 px-6 rounded-full transition-all duration-300 flex items-center justify-center gap-2 font-medium"
          >
            <i class="ri-send-plane-fill"></i>
            {translateLabels("contact.formSubmit")}
            <span class="send-icon-wrapper"></span>
          </button>
        </form>

        <!-- Form Success Message (hidden by default) -->
        <div
          id="form-success"
          class="hidden bg-green-600/20 border border-green-500/30 text-green-400 p-4 rounded-lg mt-6 items-center gap-3"
        >
          <i class="ri-checkbox-circle-line text-xl"></i>
          <p>{translateLabels("contact.formSuccess")}</p>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // Contact Form Submission
  const contactForm = document.getElementById(
    "contact-form"
  ) as HTMLFormElement | null;
  const formSuccess = document.getElementById("form-success");

  if (contactForm) {
    contactForm.addEventListener("submit", function (e) {
      e.preventDefault();

      // Simulate form submission
      const submitButton = contactForm.querySelector(
        'button[type="submit"]'
      ) as HTMLButtonElement | null;
      if (!submitButton) return;
      const originalText = submitButton.innerHTML;

      // Change button text and disable
      submitButton.innerHTML =
        '<i class="ri-loader-4-line animate-spin"></i> Sending...';
      submitButton.disabled = true;

      // Simulate API call
      setTimeout(() => {
        // Reset form
        contactForm.reset();

        // Show success message
        if (formSuccess) {
          formSuccess.classList.remove("hidden");
        }

        // Reset button
        submitButton.innerHTML = originalText;
        submitButton.disabled = false;

        // Hide success message after 5 seconds
        setTimeout(() => {
          if (formSuccess) {
            formSuccess.classList.add("hidden");
          }
        }, 5000);
      }, 1500);
    });

    // Contact Section Particles
    function createContactParticles() {
      const container = document.getElementById("contact-particles");
      const particleCount = window.innerWidth > 768 ? 10 : 5;

      for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement("div");
        particle.classList.add("particle");

        const size = Math.random() * 8 + 3;
        const posX = Math.random() * 100;
        const posY = Math.random() * 100;
        const opacity = Math.random() * 0.3 + 0.05;
        const duration = Math.random() * 15 + 10;
        const delay = Math.random() * 5;

        particle.style.width = `${size}px`;
        particle.style.height = `${size}px`;
        particle.style.left = `${posX}%`;
        particle.style.top = `${posY}%`;
        particle.style.opacity = opacity.toString();
        particle.style.animation = `floatContact ${duration}s ease-in-out ${delay}s infinite alternate`;

        if (container) {
          container.appendChild(particle);
        }
      }
    }

    // Add CSS animation for contact particles
    const contactStyleElement = document.createElement("style");
    contactStyleElement.textContent = `
            @keyframes floatContact {
                0% {
                    transform: translate(0, 0) rotate(0deg);
                }
                100% {
                    transform: translate(30px, 30px) rotate(180deg);
                }
            }
        `;
    document.head.appendChild(contactStyleElement);

    // Create particles on load
    if (document.readyState === "complete") {
      createContactParticles();
    } else {
      window.addEventListener("load", createContactParticles);
    }

    // Observe contact section elements
    const contactElements = document.querySelectorAll(
      "#contact .form-group, #contact h3, #contact .flex"
    );

    // Example IntersectionObserver to animate elements on enter
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("animate-fade-in");
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.1 }
    );

    contactElements.forEach((element) => {
      observer.observe(element);
    });
  }
</script>
